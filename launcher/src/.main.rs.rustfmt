use dll_syringe::{process::OwnedProcess, Syringe};
use serde::Deserialize;
use std::fs;
use std::fs::{read_dir, File};
use std::io::{Error, Write};
use std::path::{Path, PathBuf};
use std::process::Command;

const MOD_DLL_DIRECTORY: &str = "./dll-mods";
const LAUNCH_PROFILE_PATH: &str = "./broadsword_launcher.toml";
const STEAM_APP_ID_PATH: &str = "./steam_appid.txt";

fn main() {
    let launch_profile = read_launch_profile().expect("Could not read launch profile");

    setup_mod_directory();

    // Create steam_appid.txt if required
    let steam_app_id = &launch_profile.steam_app_id;
    if steam_app_id.is_some() {
        setup_steam_app_id_file(steam_app_id.as_ref().unwrap().as_str());
    }

    let loadable_dlls = get_loadable_dlls();
    Command::new(launch_profile.executable.as_str())
        .spawn()
        .expect("Failed to launch game");

    let target_process = OwnedProcess::find_first_by_name(launch_profile.executable.as_str())
        .expect("Could not find game's process");
    let injector = Syringe::for_process(target_process);

    for dll in loadable_dlls {
        injector
            .inject(&dll)
            .expect(&format!("Could not load DLL {}", &dll.display()));
    }
}

fn read_launch_profile() -> Result<LaunchProfile, Error> {
    let launch_profile_contents = std::fs::read_to_string(LAUNCH_PROFILE_PATH)?;
    let result =
        toml::from_str(&launch_profile_contents).expect("Could not decode launch profile!");
    return Ok(result);
}

#[derive(Debug, Deserialize)]
struct LaunchProfile {
    pub executable: String,
    pub steam_app_id: Option<String>,
}

fn setup_steam_app_id_file(appid: &str) {
    if !Path::new(STEAM_APP_ID_PATH).exists() {
        let mut file = File::create(STEAM_APP_ID_PATH)
            .expect(format!("Could not create {}", STEAM_APP_ID_PATH).as_str());

        file.write_all(appid.as_bytes())
            .expect("Could not write to steam_appid.txt");
    }
}

fn setup_mod_directory() {
    if !Path::new(MOD_DLL_DIRECTORY).exists() {
        fs::create_dir(MOD_DLL_DIRECTORY).expect("Could not create DLL mod directory");
    }
}

fn get_loadable_dlls() -> Vec<PathBuf> {
    let dir_entries = read_dir(MOD_DLL_DIRECTORY).expect("Could not read the DLL mod directory");

    return dir_entries
        .filter_map(|x| {
            x.ok().and_then(|y| {
                return if y.path().extension().unwrap() == "dll" {
                    Some(y.path())
                } else {
                    None
                };
            })
        })
        .collect();
}
